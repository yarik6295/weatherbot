import os
import logging
import matplotlib
matplotlib.use('Agg') 
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import telebot
import requests
from pymongo import MongoClient
import schedule
import time
from datetime import datetime, timedelta
from telebot import types
from timezonefinder import TimezoneFinder
from geopy.geocoders import Nominatim
import pytz
import threading
import io
from typing import Dict, List, Optional
import urllib3
from datetime import timezone
import gc
from threading import Lock
from collections import defaultdict

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('weatherbot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞—Ç–µ–º –≤ –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
logger.debug("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏")
logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
logger.warning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
logger.error("–û—à–∏–±–∫–∞")


def self_ping():
    url = os.environ.get("SELF_URL")
    if not url:
        print("[PING] SELF_URL not set.")
        return
    while True:
        try:
            requests.get(url)
            print(f"[PING] Successfully pinged {url}")
        except Exception as e:
            print(f"[PING] Error: {e}")
        time.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TOKEN = os.getenv("BOT_TOKEN")
OWM_API_KEY = os.getenv("OPENWEATHER_API_KEY")

# MongoDB Atlas connection string (–≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π)
MONGO_CONNECTION_STRING = os.getenv("MONGO_CONNECTION_STRING")
MONGO_DB_NAME = "weatherbot"
MONGO_COLLECTION = "users"

REQUIRED_ENV_VARS = ["BOT_TOKEN", "OPENWEATHER_API_KEY", "MONGO_CONNECTION_STRING", "WEBHOOK_HOST"]
missing_vars = [var for var in REQUIRED_ENV_VARS if not os.getenv(var)]
if missing_vars:
    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    exit(1)

bot = telebot.TeleBot(TOKEN)
tf = TimezoneFinder()

try:
    import ssl
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE
    geolocator = Nominatim(user_agent="enhanced_weatherbot/1.0", timeout=15)
except Exception as e:
    logger.warning(f"SSL context creation failed: {e}")
    geolocator = Nominatim(user_agent="enhanced_weatherbot/1.0", timeout=15)



WEATHER_ICONS = {
    'clear sky': '‚òÄÔ∏è',
    'few clouds': 'üå§Ô∏è',
    'scattered clouds': '‚õÖ',
    'broken clouds': '‚òÅÔ∏è',
    'overcast clouds': '‚òÅÔ∏è',
    'shower rain': 'üå¶Ô∏è',
    'rain': 'üåßÔ∏è',
    'thunderstorm': '‚õàÔ∏è',
    'snow': '‚ùÑÔ∏è',
    'mist': 'üå´Ô∏è',
    'fog': 'üå´Ô∏è',
    'haze': 'üå´Ô∏è'
}

ALERT_ICONS = {
    'hot': 'üî•',
    'cold': 'ü•∂',
    'rain': '‚òî',
    'storm': '‚õàÔ∏è',
    'snow': '‚ùÑÔ∏è',
    'wind': 'üí®'
}

LANGUAGES = {
    'ru': {
        'weekdays': ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
        'welcome': "üëã *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ MeteoBoxüì¶üå¶Ô∏è!*\n"
            "üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ üìç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n"
            "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
            "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üìç –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
        'ask_location': "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        'forecast_button': "üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑",
        'cities_button': "üèôÔ∏è –ú–æ–∏ –≥–æ—Ä–æ–¥–∞",
        'settings_button': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        'chart_button': "üìä –ì—Ä–∞—Ñ–∏–∫",
        'send_location': "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è",
        'back': "üîô –ù–∞–∑–∞–¥",
        'main_menu': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        'forecast_title': "{icon} *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city}*\nüìÖ {date}",
        'select_date': "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞",
        'select_city_forecast': "üèôÔ∏è –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
        'select_date_forecast': "üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞",
        'select_city_chart': "üèôÔ∏è –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞",
        'select_date_chart': "üìÖ –í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞",
        'current_weather': "üå°Ô∏è *–°–µ–π—á–∞—Å:* {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {feels}¬∞C)\n{icon} {desc}\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüí® –í–µ—Ç–µ—Ä: {wind} –º/—Å\nüëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –∫–º",
        'hourly': "üïê {hour}:00 ‚Äî {icon} {desc}, {temp}¬∞C",
        'daily_summary': "\nüìä *–ó–∞ –¥–µ–Ω—å:* {min}¬∞C ‚Üí {max}¬∞C",
        'alerts': "üö® *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:*\n{alerts}",
        'no_alerts': "‚úÖ –ë–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
        'not_found': "‚ö†Ô∏è –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        'error': "‚ùå –û—à–∏–±–∫–∞: {error}",
        'confirm_clear_all': "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞?",
        'confirm_clear_all_yes': "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
        'cancel': "‚ùå –û—Ç–º–µ–Ω–∞",
        'cancelled': "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
        'invalid_time_format': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú",
        'enter_city': "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        'enter_notification_time': "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ß–ß:–ú–ú):",
        'all_cities_removed': "üóëÔ∏è –í—Å–µ –≥–æ—Ä–æ–¥–∞ —É–¥–∞–ª–µ–Ω—ã",
        'clear_cities_button': "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≥–æ—Ä–æ–¥–∞",
        'city_added': "‚úÖ –ì–æ—Ä–æ–¥ {city} –¥–æ–±–∞–≤–ª–µ–Ω",
        'city_removed': "üóëÔ∏è –ì–æ—Ä–æ–¥ {city} —É–¥–∞–ª–µ–Ω",
        'max_cities': "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 5 –≥–æ—Ä–æ–¥–æ–≤",
        'saved_cities': "üåÜ –ú–æ–∏ –≥–æ—Ä–æ–¥–∞:",
        'no_saved_cities': "üìç –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤",
        'add_city': "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥",
        'notifications_on': "üîî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        'notifications_off': "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        'notification_time': "üïê –í—Ä–µ–º—è: {time}",
        'settings_menu': "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications}\nüïê –í—Ä–µ–º—è: {time}\nüåê –Ø–∑—ã–∫: {lang}\nüèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cities}\nüïí üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}",
        'choose_notification_city_button': "üåÜ –ì–æ—Ä–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {city}",
        'choose_notification_city': "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        'timezone_button': "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        'on': "–≤–∫–ª—é—á–µ–Ω—ã",
        'off': "–æ—Ç–∫–ª—é—á–µ–Ω—ã",
        'notifications_status': "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}",
        'help': "ü§ñ *WeatherBot 2.0 - –ü–æ–º–æ—â—å*\n\nüå§Ô∏è *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n‚Ä¢ –î–æ 5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\nüì± *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\nüîß *–ö–æ–º–∞–Ω–¥—ã:*\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\nüí° *–°–æ–≤–µ—Ç:* –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É!",
        'only_text_location': "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è",
        'hourly_forecast': "üïê **–ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑:**",
        'enter_city_or_location': "üìç –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        'enter_notification_time_full': "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30):",
        'notifications_scheduled': "üîî üïê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ {time}",
        'invalid_time_format_full': "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú",
        'choose_language': "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'help_full': "ü§ñ *WeatherBot 2.0 - –ü–æ–º–æ—â—å*\n\nüå§Ô∏è *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã\n‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n‚Ä¢ –î–æ 5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\nüì± *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –≥–æ—Ä–æ–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\nüîß *–ö–æ–º–∞–Ω–¥—ã:*\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\nüí° *–°–æ–≤–µ—Ç:* –î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–≥–Ω–æ–∑—É!",
        'city_tokyo': "–¢–æ–∫–∏–æ",
        'city_london': "–õ–æ–Ω–¥–æ–Ω",
        'city_washington': "–í–∞—à–∏–Ω–≥—Ç–æ–Ω",
        'city_newyork': "–ù—å—é-–ô–æ—Ä–∫",
        'alert_hot': "{icon} –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C",
        'alert_cold': "{icon} –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C",
        'alert_wind': "{icon} –°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä: {wind} –º/—Å",
        'alert_visibility': "üëÅÔ∏è –ü–ª–æ—Ö–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å: {visibility} –∫–º",
        'weather_chart': "–ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        'share_button': "üåü –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ—Ç–∞", 
        'share_message': "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã ‚Äî –æ–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: üëá",  
        'language_tab': "üåê –Ø–∑—ã–∫",
        'language_title': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'current_language': "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π",
        'language_changed': "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π",
        'settings_title': "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        'notifications_tab': "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        'back_button': "üîô –ù–∞–∑–∞–¥",
        'choose_timezone': "üåç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        'timezone_set': "‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}",
        'uv_index': "‚òÄÔ∏è UV –∏–Ω–¥–µ–∫—Å: {uv} ({risk})",
        'sun_info': "üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}",
        'wind_info': "üí® –í–µ—Ç–µ—Ä: {speed} –º/—Å {direction} (–ø–æ—Ä—ã–≤—ã –¥–æ {gust} –º/—Å)",
        'precipitation_chart': "üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        'notification_settings': "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        'enable_notifications': "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        'disable_notifications': "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        'set_notification_city': "üèô –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        'set_notification_time': "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", 
        'wind_directions': ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'],
        'uv_risk': {
            'low': '–Ω–∏–∑–∫–∏–π',
            'moderate': '—É–º–µ—Ä–µ–Ω–Ω—ã–π',
            'high': '–≤—ã—Å–æ–∫–∏–π',
            'very_high': '–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π',
            'extreme': '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π'
        },
        'saved_cities_title': "üåÜ –ú–æ–∏ –≥–æ—Ä–æ–¥–∞",
        'saved_cities_count': "üóÇ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {}",
        'remove_city_btn': "‚ùå –£–¥–∞–ª–∏—Ç—å",
        'forecast_city_btn': "üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑",
        'no_cities_text': "üìç –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤",
        'request_location': "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
        'or_text': "–∏–ª–∏",
        'enter_city_manual': "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é",
        'language_name': '–†—É—Å—Å–∫–∏–π',
        'choose_language': "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        'feels_like': "(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels}¬∞C)",
        'humidity': "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%",
        'pressure': "üìä –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞",
        'sun_info': "üåÖ –í–æ—Å—Ö–æ–¥: {sunrise} | üåá –ó–∞–∫–∞—Ç: {sunset}",
        'wind_info': "üí® –í–µ—Ç–µ—Ä: {speed} –º/—Å {direction} (–ø–æ—Ä—ã–≤—ã –¥–æ {gust} –º/—Å)",
        'now': "*–°–µ–π—á–∞—Å:*",
        'in_city': "–≤ {city}",
        
    },
    'en': {
        'weekdays': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        'welcome': "üëã *Welcome to MeteoBoxüì¶üå¶Ô∏è!*\n"
            "üìå How to use:\n"
            "1Ô∏è‚É£ Send üìç your location or enter a city name\n"
            "2Ô∏è‚É£ Use buttons for quick access to forecast and charts\n"
            "3Ô∏è‚É£ Set up notifications in ‚öôÔ∏è Settings\n\n"
            "üìç To start, send your city or location:",
        'ask_location': "üìç Send your location or enter a city name:",
        'forecast_button': "üå¶Ô∏è Forecast",
        'cities_button': "üåÜ My Cities",
        'settings_button': "‚öôÔ∏è Settings",
        'chart_button': "üìä Chart",
        'send_location': "üìç Location",
        'back': "üîô Back",
        'main_menu': "üè† Main menu",
        'forecast_title': "{icon} *Weather forecast in {city}*\nüìÖ {date}",
        'select_date': "üìÖ Select forecast date",
        'select_city_forecast': "üèôÔ∏è Select city for forecast",
        'select_date_forecast': "üìÖ Select date for forecast",
        'select_city_chart': "üèôÔ∏è Select city for chart",
        'select_date_chart': "üìÖ Select date for chart",
        'current_weather': "üå°Ô∏è *Now:* {temp}¬∞C (feels like {feels}¬∞C)\n{icon} {desc}\nüíß Humidity: {humidity}%\nüí® Wind: {wind} m/s\nüëÅÔ∏è Visibility: {visibility} km",
        'hourly': "üïê {hour}:00 ‚Äî {icon} {desc}, {temp}¬∞C",
        'daily_summary': "\nüìä *Today:* {min}¬∞C ‚Üí {max}¬∞C",
        'alerts': "üö® *Weather Alerts:*\n{alerts}",
        'no_alerts': "‚úÖ No alerts",
        'not_found': "‚ö†Ô∏è City not found. Try again.",
        'error': "‚ùå Error: {error}",
        'confirm_clear_all': "‚ö†Ô∏è Are you sure you want to delete all saved cities?",
        'confirm_clear_all_yes': "‚úÖ Yes, clear",
        'cancel': "‚ùå Cancel",
        'cancelled': "‚ùå Cancelled",
        'invalid_time_format': "‚ùå Invalid time format. Use HH:MM",
        'enter_city': "üìç Enter city name:",
        'enter_notification_time': "üïê Enter notification time (HH:MM):",
        'all_cities_removed': "üóëÔ∏è All cities removed",
        'clear_cities_button': "üóëÔ∏è Clear cities",
        'city_added': "‚úÖ City {city} added",
        'city_removed': "üóëÔ∏è City {city} removed",
        'max_cities': "‚ö†Ô∏è Maximum 5 cities",
        'saved_cities': "üèôÔ∏è *Saved Cities:*",
        'no_saved_cities': "üìç No saved cities",
        'add_city': "‚ûï Add city",
        'notifications_on': "üîî Turn off notifications",
        'notifications_off': "üîî Turn on notifications",
        'notification_time': "üïê Time: {time}",
        'settings_menu': "‚öôÔ∏è *Settings*\n\nüîî Notifications: {notifications}\nüïê Time: {time}\nüåê Language: {lang}\nüèôÔ∏è Saved cities: {cities}\nüïí üåç Timezone: {timezone}",
        'choose_notification_city_button': "üåÜ Notification city: {city}",
        'choose_notification_city': "üåÜ Choose a city for daily notifications:",
        'timezone_button': "üåç Change timezone",
        'on': "on",
        'off': "off",
        'notifications_status': "üîî Notifications {status}",
        'help': "ü§ñ *WeatherBot 2.0 - Help*\n\nüå§Ô∏è *Main features:*\n‚Ä¢ Current weather with details\n‚Ä¢ Weather forecast for several days\n‚Ä¢ Temperature charts\n‚Ä¢ Weather alerts\n‚Ä¢ Up to 5 saved cities\n‚Ä¢ Automatic notifications\n\nüì± *How to use:*\n‚Ä¢ Send your location or city name\n‚Ä¢ Use buttons for quick access\n‚Ä¢ Set up notifications in settings\n‚Ä¢ Add cities to favorites\n\nüîß *Commands:*\n/start - Start bot\n/help - This help\n\nüí° *Tip:* Add several cities for quick access to the forecast!",
        'only_text_location': "ü§ñ I only understand text and location. Send a city name or press üìç Location",
        'hourly_forecast': "üïê **Hourly forecast:**",
        'enter_city_or_location': "üìç Enter a city or send your location:",
        'enter_notification_time_full': "üïê Enter notification time in HH:MM format (e.g., 08:30):",
        'notifications_scheduled': "üîî Notifications will be sent at {time}",
        'invalid_time_format_full': "‚ùå Invalid time format. Use HH:MM",
        'choose_language': "üåç Choose language:",
        'help_full': "ü§ñ *WeatherBot 2.0 - Help*\n\nüå§Ô∏è *Main features:*\n‚Ä¢ Current weather with details\n‚Ä¢ Weather forecast for several days\n‚Ä¢ Temperature charts\n‚Ä¢ Weather alerts\n‚Ä¢ Up to 5 saved cities\n‚Ä¢ Automatic notifications\n\nüì± *How to use:*\n‚Ä¢ Send your location or city name\n‚Ä¢ Use buttons for quick access\n‚Ä¢ Set up notifications in settings\n‚Ä¢ Add cities to favorites\n\nüîß *Commands:*\n/start - Start bot\n/help - This help\n\nüí° *Tip:* Add several cities for quick access to the forecast!",
        'city_tokyo': "Tokyo",
        'city_london': "London",
        'city_washington': "Washington",
        'city_newyork': "New York",
        'alert_hot': "{icon} Very hot! Temperature: {temp}¬∞C",
        'alert_cold': "{icon} Very cold! Temperature: {temp}¬∞C",
        'alert_wind': "{icon} Strong wind: {wind} m/s",
        'alert_visibility': "üëÅÔ∏è Low visibility: {visibility} km",
        'weather_chart': "Temperature chart",
        'share_button': "üåü Share Bot",  
        'share_message': "Try this weather bot ‚Äî it sends accurate forecasts and alerts: üëá",  
        'language_tab': "üåê Language", 
        'language_title': "Select language:",
        'current_language': "Current language: English",
        'language_changed': "‚úÖ Language changed to English",
        'settings_title': "‚öôÔ∏è Settings",
        'notifications_tab': "üîî Notifications",
        'back_button': "üîô Back",
        'choose_timezone': "üåç Select timezone:",
        'timezone_set': "‚úÖ Timezone set: {timezone}",
        'uv_index': "‚òÄÔ∏è UV index: {uv} ({risk})",
        'sun_info': "üåÖ Sunrise: {sunrise} | üåá Sunset: {sunset}",
        'wind_info': "üí® Wind: {speed} m/s {direction} (gusts to {gust} m/s)",
        'precipitation_chart': "üìä Precipitation and temperature chart",
        'notification_settings': "üîî Notification settings",
        'enable_notifications': "üîî Enable notifications",
        'disable_notifications': "üîï Disable notifications",
        'set_notification_city': "üèô Set notification city",
        'set_notification_time': "‚è∞ Set notification time",
        'wind_directions': ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'],
        'uv_risk': {
            'low': 'low',
            'moderate': 'moderate',
            'high': 'high',
            'very_high': 'very high',
            'extreme': 'extreme'
        },
        'saved_cities_title': "üåÜ My Cities",
        'saved_cities_count': "üóÇ Cities saved: {}",
        'remove_city_btn': "‚ùå Delete",
        'forecast_city_btn': "üå§Ô∏è Forecast", 
        'no_cities_text': "üìç No saved cities",
        'request_location': "üìç Send location",
        'or_text': "or",
        'enter_city_manual': "enter city name manually",
        'language_name': 'English',
        'choose_language': "Select language:",
        'feels_like': "(feels like {feels}¬∞C)",
        'humidity': "üíß Humidity: {humidity}%",
        'pressure': "üìä Pressure: {pressure} hPa",
        'sun_info': "üåÖ Sunrise: {sunrise} | üåá Sunset: {sunset}",
        'wind_info': "üí® Wind: {speed} m/s {direction} (gusts to {gust} m/s)",
        'now': "*Now:*",
        'in_city': "in {city}",
    },
    'uk': {
        'weekdays': ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥'],
        'welcome': "üëã *–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ MeteoBoxüì¶üå¶Ô∏è!*\n"
            "üìå –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:\n"
            "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å üìç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞\n"
            "2Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤\n"
            "3Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö\n\n"
            "üìç –î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ –∞–±–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è:",
        'ask_location': "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:",
        'forecast_button': "üå¶Ô∏è –ü—Ä–æ–≥–Ω–æ–∑",
        'cities_button': "üåÜ –ú–æ—ó –º—ñ—Å—Ç–∞",
        'settings_button': "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        'chart_button': "üìä –ì—Ä–∞—Ñ—ñ–∫",
        'send_location': "üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è",
        'back': "üîô –ù–∞–∑–∞–¥",
        'main_menu': "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        'forecast_title': "{icon} *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –≤ {city}*\nüìÖ {date}",
        'select_date': "üìÖ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑—É",
        'select_city_forecast': "üèôÔ∏è –í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É",
        'select_date_forecast': "üìÖ –í–∏–±—ñ—Ä –¥–∞—Ç–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É",
        'select_city_chart': "üèôÔ∏è –í–∏–±—ñ—Ä –º—ñ—Å—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞",
        'select_date_chart': "üìÖ –í–∏–±—ñ—Ä –¥–∞—Ç–∏ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞",
        'current_weather': "üå°Ô∏è *–ó–∞—Ä–∞–∑:* {temp}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è {feels}¬∞C)\n{icon} {desc}\nüíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\nüí® –í—ñ—Ç–µ—Ä: {wind} –º/—Å\nüëÅÔ∏è –í–∏–¥–∏–º—ñ—Å—Ç—å: {visibility} –∫–º",
        'hourly': "üïê {hour}:00 ‚Äî {icon} {desc}, {temp}¬∞C",
        'daily_summary': "\nüìä *–ó–∞ –¥–µ–Ω—å:* {min}¬∞C ‚Üí {max}¬∞C",
        'alerts': "üö® *–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:*\n{alerts}",
        'no_alerts': "‚úÖ –ë–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å",
        'not_found': "‚ö†Ô∏è –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        'error': "‚ùå –ü–æ–º–∏–ª–∫–∞: {error}",
        'confirm_clear_all': "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –º—ñ—Å—Ç–∞?",
        'confirm_clear_all_yes': "‚úÖ –¢–∞–∫, –æ—á–∏—Å—Ç–∏—Ç–∏",
        'cancel': "‚ùå –°–∫–∞—Å—É–≤–∞–Ω–Ω—è",
        'cancelled': "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ",
        'invalid_time_format': "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ì–ì:–•–•",
        'enter_city': "üìç –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:",
        'enter_notification_time': "üïê –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30):",
        'all_cities_removed': "üóëÔ∏è –£—Å—ñ –º—ñ—Å—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω—ñ",
        'clear_cities_button': "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –º—ñ—Å—Ç–∞",
        'city_added': "‚úÖ –ú—ñ—Å—Ç–æ {city} –¥–æ–¥–∞–Ω–æ",
        'city_removed': "üóëÔ∏è –ú—ñ—Å—Ç–æ {city} –≤–∏–¥–∞–ª–µ–Ω–æ",
        'max_cities': "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 5 –º—ñ—Å—Ç",
        'saved_cities': "üèôÔ∏è *–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –º—ñ—Å—Ç–∞:*",
        'no_saved_cities': "üìç –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –º—ñ—Å—Ç",
        'add_city': "‚ûï –î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ",
        'notifications_on': "üîî –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        'notifications_off': "üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        'notification_time': "üïê –ß–∞—Å: {time}",
        'settings_menu': "‚öôÔ∏è *–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è*\n\nüîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {notifications}\nüïê –ß–∞—Å: {time}\nüåê –ú–æ–≤–∞: {lang}\nüèôÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–æ –º—ñ—Å—Ç: {cities}\nüïí üåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {timezone}",
        'choose_notification_city_button': "üåÜ –ú—ñ—Å—Ç–æ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å: {city}",
        'choose_notification_city': "üåÜ –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è —â–æ–¥–µ–Ω–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å:",
        'timezone_button': "üåç –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å",
        'on': "—É–≤—ñ–º–∫–Ω–µ–Ω–æ",
        'off': "–≤–∏–º–∫–Ω–µ–Ω–æ",
        'notifications_status': "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è {status}",
        'help': "ü§ñ *WeatherBot 2.0 - –î–æ–≤—ñ–¥–∫–∞*\n\nüå§Ô∏è *–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:*\n‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤\n‚Ä¢ –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏\n‚Ä¢ –ü–æ–≥–æ–¥–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è\n‚Ä¢ –î–æ 5 –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –º—ñ—Å—Ç\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n\nüì± *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:*\n‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É\n‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö\n‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ –º—ñ—Å—Ç–∞ –≤ –æ–±—Ä–∞–Ω–µ\n\nüîß *–ö–æ–º–∞–Ω–¥–∏:*\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n\nüí° *–ü–æ—Ä–∞–¥–∞:* –î–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É!",
        'only_text_location': "ü§ñ –Ø —Ä–æ–∑—É–º—ñ—é –ª–∏—à–µ —Ç–µ–∫—Å—Ç —ñ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É üìç –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è",
        'hourly_forecast': "üïê **–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:**",
        'enter_city_or_location': "üìç –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
        'enter_notification_time_full': "üïê –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30):",
        'notifications_scheduled': "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—è –æ {time}",
        'invalid_time_format_full': "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ì–ì:–•–•",
        'choose_language': "üåç –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'help_full': "ü§ñ *WeatherBot 2.0 - –î–æ–≤—ñ–¥–∫–∞*\n\nüå§Ô∏è *–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:*\n‚Ä¢ –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –∑ –¥–µ—Ç–∞–ª—è–º–∏\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤\n‚Ä¢ –ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏\n‚Ä¢ –ü–æ–≥–æ–¥–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è\n‚Ä¢ –î–æ 5 –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –º—ñ—Å—Ç\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n\nüì± *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å:*\n‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞\n‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É\n‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö\n‚Ä¢ –î–æ–¥–∞–≤–∞–π—Ç–µ –º—ñ—Å—Ç–∞ –≤ –æ–±—Ä–∞–Ω–µ\n\nüîß *–ö–æ–º–∞–Ω–¥–∏:*\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n\nüí° *–ü–æ—Ä–∞–¥–∞:* –î–æ–¥–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É!",
        'city_tokyo': "–¢–æ–∫—ñ–æ",
        'city_london': "–õ–æ–Ω–¥–æ–Ω",
        'city_washington': "–í–∞—à–∏–Ω–≥—Ç–æ–Ω",
        'city_newyork': "–ù—å—é-–ô–æ—Ä–∫",
        'alert_hot': "{icon} –î—É–∂–µ —Å–ø–µ–∫–æ—Ç–Ω–æ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C",
        'alert_cold': "{icon} –î—É–∂–µ —Ö–æ–ª–æ–¥–Ω–æ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C",
        'alert_wind': "{icon} –°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä: {wind} –º/—Å",
        'alert_visibility': "üëÅÔ∏è –ü–æ–≥–∞–Ω–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å: {visibility} –∫–º",
        'weather_chart': "–ì—Ä–∞—Ñ—ñ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏",
        'share_button': "üåü –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ –±–æ—Ç–∞",  
        'share_message': "–°–ø—Ä–æ–±—É–π—Ç–µ —Ü—å–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø–æ–≥–æ–¥–∏ ‚Äî –≤—ñ–Ω –Ω–∞–¥—Å–∏–ª–∞—î —Ç–æ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: üëá",
        'language_tab': "üåê –ú–æ–≤–∞",
        'language_title': "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'current_language': "–ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        'language_changed': "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –£–∫—Ä–∞—ó–Ω—Å—å–∫—É",
        'settings_title': "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
        'notifications_tab': "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", 
        'back_button': "üîô –ù–∞–∑–∞–¥",
        'choose_timezone': "üåç –í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:",
        'timezone_set': "‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timezone}",
        'uv_index': "‚òÄÔ∏è UV —ñ–Ω–¥–µ–∫—Å: {uv} ({risk})",
        'sun_info': "üåÖ –°—Ö—ñ–¥: {sunrise} | üåá –ó–∞—Ö—ñ–¥: {sunset}",
        'wind_info': "üí® –í—ñ—Ç–µ—Ä: {speed} –º/—Å {direction} (–ø–æ—Ä–∏–≤–∏ –¥–æ {gust} –º/—Å)",
        'precipitation_chart': "üìä –ì—Ä–∞—Ñ—ñ–∫ –æ–ø–∞–¥—ñ–≤ —ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏",
        'notification_settings': "üîî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å",
        'enable_notifications': "üîî –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        'disable_notifications': "üîï –í–∏–º–∫–Ω—É—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è",
        'set_notification_city': "üèô –û–±—Ä–∞—Ç–∏ –º—ñ—Å—Ç–æ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å",
        'set_notification_time': "‚è∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å",
        'wind_directions': ['–ü–Ω', '–ü–Ω–°—Ö', '–°—Ö', '–ü–¥–°—Ö', '–ü–¥', '–ü–¥–ó—Ö', '–ó—Ö', '–ü–Ω–ó—Ö'],
        'uv_risk': {
            'low': '–Ω–∏–∑—å–∫–∏–π',
            'moderate': '–ø–æ–º—ñ—Ä–Ω–∏–π',
            'high': '–≤–∏—Å–æ–∫–∏–π',
            'very_high': '–¥—É–∂–µ –≤–∏—Å–æ–∫–∏–π',
            'extreme': '–µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π'
        },
        'saved_cities_title': "üåÜ –ú–æ—ó –º—ñ—Å—Ç–∞",
        'saved_cities_count': "üóÇ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –º—ñ—Å—Ç: {}",
        'remove_city_btn': "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏",
        'forecast_city_btn': "üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑",
        'no_cities_text': "üìç –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –º—ñ—Å—Ç",
        'request_location': "üìç –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é",
        'or_text': "–∞–±–æ",
        'enter_city_manual': "–≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –≤—Ä—É—á–Ω—É",
        'language_name': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
        'choose_language': "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        'feels_like': "(–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {feels}¬∞C)",
        'humidity': "üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%",
        'pressure': "üìä –¢–∏—Å–∫: {pressure} –≥–ü–∞",
        'sun_info': "üåÖ –°—Ö—ñ–¥: {sunrise} | üåá –ó–∞—Ö—ñ–¥: {sunset}",
        'wind_info': "üí® –í—ñ—Ç–µ—Ä: {speed} –º/—Å {direction} (–ø–æ—Ä–∏–≤–∏ –¥–æ {gust} –º/—Å)",
        'now': "*–ó–∞—Ä–∞–∑:*",
        'in_city': "–≤ {city}",
    
    }
}
import logging

# -- Data Management --
class DataManager:
    def __init__(self, MONGO_CONNECTION_STRING: str, db_name: str, collection_name: str):
        try:
            # –û—á–∏—â–∞–µ–º URI –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            MONGO_CONNECTION_STRING = MONGO_CONNECTION_STRING.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URI –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å mongodb
            if not MONGO_CONNECTION_STRING.startswith("mongodb"):
                raise ValueError("Invalid MongoDB URI format")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if "retryWrites=true" not in MONGO_CONNECTION_STRING.lower():
                if "?" in MONGO_CONNECTION_STRING:
                    MONGO_CONNECTION_STRING += "&retryWrites=true&w=majority"
                else:
                    MONGO_CONNECTION_STRING += "?retryWrites=true&w=majority"
            
            logger.info(f"Connecting to MongoDB with URI: {MONGO_CONNECTION_STRING.split('@')[0]}...")
            
            self.client = MongoClient(
                MONGO_CONNECTION_STRING,
                serverSelectionTimeoutMS=5000,
                tls=True,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tls –≤–º–µ—Å—Ç–æ ssl
                tlsAllowInvalidCertificates=False
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.client.admin.command('ping')
            self.db = self.client[db_name]
            self.collection = self.db[collection_name]
            logger.info("‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå FATAL ERROR: MongoDB connection failed - {str(e)}")
            raise SystemExit(1)
    def connect(self, MONGO_CONNECTION_STRING: str, db_name: str, collection_name: str):
        try:
            if "retryWrites=true" not in MONGO_CONNECTION_STRING.lower():
                MONGO_CONNECTION_STRING += "?retryWrites=true&w=majority"
            
            self.client = MongoClient(
                MONGO_CONNECTION_STRING,
                serverSelectionTimeoutMS=5000,
                ssl=True,
                ssl_cert_reqs=ssl.CERT_REQUIRED
            )
            self.client.admin.command('ping')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.db = self.client[db_name]
            self.collection = self.db[collection_name]
            self.collection.create_index("chat_id", unique=True)
        except Exception as e:
            logger.error(f"MongoDB connection failed: {e}")
            raise

    def reconnect(self):
        try:
            self.client.admin.command('ping')
            return True
        except:
            try:
                self.connect(self.client.HOST, self.db.name, self.collection.name)
                return True
            except:
                return False
        
    def get_user_settings(self, chat_id: int) -> dict:
        doc = self.collection.find_one({"chat_id": chat_id})
        defaults = {
            "chat_id": chat_id,
            'language': 'ru',
            'notifications': False,
            'notification_time': '20:00',
            'saved_cities': [],
            'timezone': 'Europe/Minsk',
            'last_activity': datetime.now().isoformat(),
            'notification_city': None
        }
        if not doc:
            self.collection.insert_one(defaults)
            return defaults
        # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
        updated = False
        for k, v in defaults.items():
            if k not in doc:
                doc[k] = v
                updated = True
        if updated:
            self.collection.update_one({"chat_id": chat_id}, {"$set": doc})
        return doc

    def update_user_setting(self, chat_id: int, key: str, value):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ, –Ω–æ last_activity –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º
        update = {key: value, 'last_activity': datetime.now().isoformat()}
        self.collection.update_one(
            {"chat_id": chat_id},
            {"$set": update},
            upsert=True
        )

# -- Weather API Manager --
class WeatherAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.openweathermap.org/data/2.5"
    
    def normalize_city_name(self, city: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        return city.strip().title()
    
    def get_current_weather(self, city: str, lang: str = 'en') -> Optional[Dict]:
        if not city or len(city) > 100:
            return None
            
        try:
            params = {
                'q': city,
                'appid': self.api_key,
                'units': 'metric',
                'lang': lang
            }
            response = requests.get(
                f"{self.base_url}/weather",
                params=params,
                timeout=15,
                verify=True  # –í–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ SSL
            )
            
            if response.status_code != 200:
                logger.error(f"OWM API Error: {response.status_code} - {response.text}")
                return None
                
            return response.json()
            
        except requests.exceptions.RequestException as e:
            logger.error(f"API Request failed: {e}")
            return None
        except ValueError as e:
            logger.error(f"API JSON decode error: {e}")
            return None
    
    def get_forecast(self, city: str, lang: str = 'en') -> Optional[Dict]:
        try:
            params = {
                'q': city,
                'appid': self.api_key,
                'units': 'metric',
                'lang': lang
            }
            response = requests.get(f"{self.base_url}/forecast", params=params, timeout=15)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Error fetching forecast: {e}")
            return None
    
    def get_weather_alerts(self, lat: float, lon: float, lang: str = 'en') -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            current = self.get_current_weather_by_coords(lat, lon, lang)
            if not current:
                return []
            alerts = []
            temp = current['main']['temp']
            wind_speed = current['wind']['speed']
            visibility = current.get('visibility', 10000) / 1000  # –∫–º
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if temp > 35:
                alerts.append(LANGUAGES[lang]['alert_hot'].format(icon=ALERT_ICONS['hot'], temp=temp))
            elif temp < -20:
                alerts.append(LANGUAGES[lang]['alert_cold'].format(icon=ALERT_ICONS['cold'], temp=temp))
            # –í–µ—Ç–µ—Ä
            if wind_speed > 15:
                alerts.append(LANGUAGES[lang]['alert_wind'].format(icon=ALERT_ICONS['wind'], wind=wind_speed))
            # –í–∏–¥–∏–º–æ—Å—Ç—å
            if visibility < 1:
                alerts.append(LANGUAGES[lang]['alert_visibility'].format(visibility=visibility))
            return alerts
        except Exception as e:
            logger.error(f"Error getting weather alerts: {e}")
            return []
    
    def get_current_weather_by_coords(self, lat: float, lon: float, lang: str = 'en') -> Optional[Dict]:
        try:
            params = {
                'lat': lat,
                'lon': lon,
                'appid': self.api_key,
                'units': 'metric',
                'lang': lang
            }
            response = requests.get(f"{self.base_url}/weather", params=params, timeout=15)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"Error fetching weather by coords: {e}")
            return None

# -- Chart Generator --
class ChartGenerator:
    @staticmethod
    def create_temperature_precipitation_chart(forecast_data, city, lang):
        try:
            plt.style.use('dark_background')
            fig, ax1 = plt.subplots(figsize=(12, 6))
            
            times = []
            temps = []
            precip = []
            
            for item in forecast_data['list'][:24]:
                dt = datetime.fromtimestamp(item['dt'])
                times.append(dt)
                temps.append(item['main']['temp'])
                rain = item.get('rain', {}).get('3h', 0)
                snow = item.get('snow', {}).get('3h', 0)
                precip.append(rain + snow)
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            ax1.plot(times, temps, color='#FFA500', linewidth=2, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
            ax1.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='#FFA500')
            ax1.tick_params(axis='y', colors='#FFA500')
            
            # –û—Å–∞–¥–∫–∏
            ax2 = ax1.twinx()
            ax2.bar(times, precip, color='#1E90FF', alpha=0.5, width=0.05, label='–û—Å–∞–¥–∫–∏')
            ax2.set_ylabel('–û—Å–∞–¥–∫–∏ (–º–º)', color='#1E90FF')
            ax2.tick_params(axis='y', colors='#1E90FF')
            
            ax1.set_title(f'{LANGUAGES[lang]["precipitation_chart"]} - {city}')
            ax1.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
            ax1.xaxis.set_major_locator(mdates.HourLocator(interval=3))
            
            plt.xticks(rotation=45, fontsize=8)
            plt.tight_layout()
            
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=150)
            plt.close(fig)
            gc.collect()
            buffer.seek(0)
            return buffer
        except Exception as e:
            logger.error(f"Error creating chart: {e}")
            return None
    @staticmethod
    def create_temperature_chart(forecast_data: Dict, city: str, lang: str) -> io.BytesIO:
        matplotlib.use('Agg')
        plt.ioff()
        try:
            if not forecast_data or 'list' not in forecast_data or not forecast_data['list']:
                return None
                
            # –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö:
            required_keys = ['dt', 'main', 'weather']
            if not all(key in item for item in forecast_data['list'] for key in required_keys):
                return None
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            plt.rcParams['font.family'] = ['DejaVu Sans']
            
            plt.style.use('dark_background')
            fig, ax = plt.subplots(figsize=(12, 6))
            
            times = []
            temps = []
            
            for item in forecast_data['list'][:24]:  # 24 —á–∞—Å–∞
                dt = datetime.fromtimestamp(item['dt'])
                times.append(dt)
                temps.append(item['main']['temp'])
            
            ax.plot(times, temps, color='#00D4FF', linewidth=3, marker='o', markersize=4)
            ax.fill_between(times, temps, alpha=0.3, color='#00D4FF')
            
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ax.set_title(f'Temperature Chart - {city}', fontsize=16, color='white', pad=20)
            ax.set_xlabel('Time', fontsize=12, color='white')
            ax.set_ylabel('Temperature (¬∞C)', fontsize=12, color='white')
            
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
            ax.xaxis.set_major_locator(mdates.HourLocator(interval=3))
            plt.xticks(rotation=45, fontsize=8)
            
            ax.grid(True, alpha=0.3)
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            
            plt.tight_layout()
            
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', 
                       facecolor='#1a1a1a', edgecolor='none')
            plt.close(fig)
            gc.collect()
            buffer.seek(0)
            
            return buffer
        except Exception as e:
            logger.error(f"Error creating chart: {e}")
            return None



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataManager —Å MongoDB
data_manager = DataManager(MONGO_CONNECTION_STRING, MONGO_DB_NAME, MONGO_COLLECTION)
weather_api = WeatherAPI(OWM_API_KEY)

_weather_cache = {}
_weather_cache_lock = Lock()
WEATHER_CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

USER_RATE_LIMIT = 20  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
_user_msg_times = defaultdict(list)

def check_rate_limit(chat_id):
    now = time.time()
    times = _user_msg_times[chat_id]
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
    _user_msg_times[chat_id] = [t for t in times if now-t < 60]
    if len(_user_msg_times[chat_id]) >= USER_RATE_LIMIT:
        return False
    _user_msg_times[chat_id].append(now)
    return True

_cache_cleanup_counter = 0

def send_main_menu(chat_id, lang):
    safe_send_message(
        chat_id,
        LANGUAGES[lang]['main_menu'],
        reply_markup=create_main_keyboard(chat_id)
    )

def get_cached_weather(city, lang, api_func):
    global _cache_cleanup_counter
    now = time.time()
    key = (city.lower(), lang)
    with _weather_cache_lock:
        entry = _weather_cache.get(key)
        if entry and now - entry['ts'] < WEATHER_CACHE_TTL:
            return entry['data']
        _cache_cleanup_counter += 1
        if _cache_cleanup_counter % 500 == 0:
            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for k in list(_weather_cache.keys()):
                if now - _weather_cache[k]['ts'] > WEATHER_CACHE_TTL:
                    del _weather_cache[k]
    data = api_func(city, lang)
    with _weather_cache_lock:
        _weather_cache[key] = {'data': data, 'ts': now}
    return data


def generate_utc_timezone_keyboard(lang="ru"):
    offsets = [
        -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1,
        0, 1, 2, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5,
        7, 8, 8.75, 9, 9.5, 10, 10.5, 11, 12, 12.75, 13, 14
    ]
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = []
    for offset in offsets:
        label = f"UTC{offset:+g}"
        callback = f"set_timezone_UTC{offset:+g}"
        buttons.append(types.InlineKeyboardButton(label, callback_data=callback))
    for i in range(0, len(buttons), 3):
        markup.add(*buttons[i:i+3])
    markup.add(types.InlineKeyboardButton(LANGUAGES[lang]['back_button'], callback_data="back_to_settings"))
    return markup

def parse_utc_timezone(tz_str):
    import re
    m = re.fullmatch(r"UTC([+-]?\d+(?:\.\d+)?)", tz_str)
    if not m:
        return None
    try:
        return float(m.group(1))
    except Exception:
        return None

# -- Helper Functions --
def get_weather_icon(description: str) -> str:
    return WEATHER_ICONS.get(description.lower(), 'üå§Ô∏è')

def create_main_keyboard(chat_id):
    lang = data_manager.get_user_settings(chat_id)['language']
    
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        types.KeyboardButton(LANGUAGES[lang]['forecast_button']),
        types.KeyboardButton(LANGUAGES[lang]['chart_button'])
    )
    kb.row(
        types.KeyboardButton(LANGUAGES[lang]['share_button']),
        types.KeyboardButton(LANGUAGES[lang]['settings_button'])
    )
        
    return kb

def safe_send_message(chat_id: int, text: str, **kwargs):
    try:
        msg = bot.send_message(chat_id, text, **kwargs)
        return msg
    except telebot.apihelper.ApiTelegramException as e:
        if e.result.status_code == 403:
            logger.info(f"User {chat_id} blocked the bot")
            # –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:
            data_manager.collection.delete_one({"chat_id": chat_id})
        else:
            logger.error(f"Send error: {e}")
    except Exception as e:
        logger.error(f"Unexpected send error: {e}")

# -- Bot Handlers --
@bot.message_handler(commands=['start'])
def cmd_start(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        defaults = {
            'notification_city': None,
            'notification_time': '08:00',
            'notifications': True,
            'language': 'ru'
        }
        
        current_settings = data_manager.get_user_settings(msg.chat.id)
        for key, value in defaults.items():
            if key not in current_settings:
                data_manager.update_user_setting(msg.chat.id, key, value)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        lang_markup = types.InlineKeyboardMarkup()
        lang_markup.add(
            types.InlineKeyboardButton(
                "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ / Choose language",
                callback_data="show_lang_menu"
            )
        )

        bot.send_message(
            msg.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WeatherBot!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=lang_markup
        )

    except Exception as e:
        logger.error(f"Start error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "show_lang_menu")
def show_language_menu(call):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            user_settings = data_manager.get_user_settings(call.message.chat.id)
            current_lang = user_settings.get('language', 'ru')
        except:
            current_lang = 'ru'
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Å –∑–∞—â–∏—Ç–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        lang_markup = types.InlineKeyboardMarkup(row_width=2)
        for code in LANGUAGES.keys():
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
            lang_name = LANGUAGES.get(code, {}).get('language_name', code.upper())
            
            lang_markup.add(
                types.InlineKeyboardButton(
                    text=lang_name,
                    callback_data=f"set_init_lang_{code}"
                )
            )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        menu_text = LANGUAGES.get(current_lang, {}).get(
            'choose_language', 
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:"
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=menu_text,
                reply_markup=lang_markup
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            bot.send_message(
                call.message.chat.id,
                menu_text,
                reply_markup=lang_markup
            )
            
        # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"Language menu error: {str(e)}")
        try:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é")
        except:
            pass

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_init_lang_'))
def set_initial_language(call):
    try:
        lang = call.data.split('_')[3]
        data_manager.update_user_setting(call.message.chat.id, 'language', lang)

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é)
        main_kb = create_main_keyboard(call.message.chat.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(
            call.message.chat.id,
            LANGUAGES[lang]['welcome'],
            parse_mode="Markdown",
            reply_markup=main_kb
        )

        # –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π!
        geo_markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True, 
            one_time_keyboard=True
        )
        geo_markup.add(
            types.KeyboardButton(
                LANGUAGES[lang]['send_location'],
                request_location=True
            )
        )
        bot.send_message(
            call.message.chat.id,
            LANGUAGES[lang]['ask_location'],
            reply_markup=geo_markup
        )

        bot.answer_callback_query(call.id, LANGUAGES[lang]['language_changed'])

    except Exception as e:
        logger.error(f"Set language error: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_settings")
def handle_back_to_settings(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton(LANGUAGES[lang]['notifications_tab'], callback_data="notifications_settings"),
            types.InlineKeyboardButton(LANGUAGES[lang]['language_tab'], callback_data="language_settings")
        )
        markup.row(
            types.InlineKeyboardButton(LANGUAGES[lang]['timezone_button'], callback_data="timezone_settings"),
            types.InlineKeyboardButton(LANGUAGES[lang]['saved_cities_title'], callback_data="show_saved_cities_settings")
        )
        markup.row(
            types.InlineKeyboardButton(LANGUAGES[lang]['back_button'], callback_data="back_to_main")
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=LANGUAGES[lang]['settings_title'],
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Back error: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_main")
def handle_back_to_main(call):
    try:
        lang = data_manager.get_user_settings(call.message.chat.id)['language']
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(
            types.KeyboardButton(LANGUAGES[lang]['forecast_button']),
            types.KeyboardButton(LANGUAGES[lang]['chart_button'])
        )
        markup.row(
            types.KeyboardButton(LANGUAGES[lang]['settings_button']),
            types.KeyboardButton(LANGUAGES[lang]['share_button'])
        )
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"Back to main error: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_lang_'))
def set_language_handler(call):
    try:
        lang = call.data.split('_')[2]
        data_manager.update_user_setting(call.message.chat.id, 'language', lang)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        geo_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        geo_markup.add(
            types.KeyboardButton(
                LANGUAGES[lang]['send_location'],
                request_location=True
            )
        )
        
        bot.send_message(
            call.message.chat.id,
            LANGUAGES[lang]['welcome'],
            parse_mode="Markdown",
            reply_markup=geo_markup
        )
        
        bot.answer_callback_query(call.id, LANGUAGES[lang]['language_changed'])
        
    except Exception as e:
        logger.error(f"Language error: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞")       

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def set_language(call):
    try:
        lang_code = call.data.split('_')[1]
        data_manager.update_user_setting(call.message.chat.id, 'language', lang_code)
        
        safe_send_message(
            call.message.chat.id,
            LANGUAGES[lang_code]['ask_location'],
            reply_markup=create_main_keyboard(lang_code)
        )
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in set_language: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "notifications_settings")
def notification_settings(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        
        markup = types.InlineKeyboardMarkup()
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if settings.get('notifications', False):
            markup.add(types.InlineKeyboardButton(
                LANGUAGES[lang]['disable_notifications'],
                callback_data="toggle_notifications"
            ))
        else:
            markup.add(types.InlineKeyboardButton(
                LANGUAGES[lang]['enable_notifications'],
                callback_data="toggle_notifications"
            ))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        markup.add(types.InlineKeyboardButton(
            LANGUAGES[lang]['set_notification_city'],
            callback_data="choose_notification_city"
        ))
        
        # –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        markup.add(types.InlineKeyboardButton(
            LANGUAGES[lang]['set_notification_time'],
            callback_data="set_notification_time"
        ))
        
        markup.add(types.InlineKeyboardButton(
            LANGUAGES[lang]['back_button'],
            callback_data="back_to_settings"
        ))
        
        bot.edit_message_text(
            LANGUAGES[lang]['notification_settings'],
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in notification_settings: {e}")

# --- –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
@bot.callback_query_handler(func=lambda call: call.data == "choose_notification_city")
def choose_notification_city(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])
        if not saved_cities:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['no_saved_cities'])
            return
        markup = types.InlineKeyboardMarkup(row_width=2)
        for city in saved_cities:
            markup.add(types.InlineKeyboardButton(city, callback_data=f"set_notification_city_{city}"))
        safe_send_message(call.message.chat.id, "üîî –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in choose_notification_city: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('set_notification_city_'))
def set_notification_city(call):
    try:
        city = call.data.split('_', 3)[3]
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])
        if city not in saved_cities:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['not_found'])
            return
        data_manager.update_user_setting(call.message.chat.id, 'notification_city', city)
        safe_send_message(call.message.chat.id, f"‚úÖ {city} —Ç–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥–Ω–æ–∑–µ.")
        show_settings(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in set_notification_city: {e}")

@bot.message_handler(content_types=['location'])
def handle_location(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        if not msg.location:
            return
            
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        location = geolocator.reverse((msg.location.latitude, msg.location.longitude), exactly_one=True)
        if not location:
            safe_send_message(msg.chat.id, LANGUAGES[lang]['not_found'])
            return
            
        address = location.raw.get('address', {})
        city = address.get('city') or address.get('town') or address.get('village')
        
        if not city:
            safe_send_message(msg.chat.id, LANGUAGES[lang]['not_found'])
            return
            
        # –î–∞–ª–µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥ –∫–∞–∫ –æ–±—ã—á–Ω–æ
        process_new_city(msg, city=city)
        
    except Exception as e:
        logger.error(f"Error in handle_location: {e}")
        
@bot.message_handler(func=lambda m: m.text and any(m.text == LANGUAGES[lang]['share_button'] for lang in LANGUAGES.keys()))
def handle_share_button(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        bot_username = bot.get_me().username
        lang = data_manager.get_user_settings(msg.chat.id)['language']
        share_template = LANGUAGES[lang]['share_message']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (—É–±–µ–¥–∏–º—Å—è, —á—Ç–æ username –±–µ–∑ @)
        clean_username = bot_username.lstrip('@')
        final_text = share_template.format(bot_username=clean_username)
        
        # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è URL
        from urllib.parse import quote
        encoded_text = quote(final_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                text=LANGUAGES[lang].get('share_action', 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å'),
                url=f"https://t.me/share/url?url=https://t.me/{clean_username}&text={encoded_text}"
            )
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            msg.chat.id,
            final_text,
            reply_markup=markup,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        logger.error(f"Share error: {e}")
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏")

@bot.message_handler(func=lambda m: m.text and any(m.text == LANGUAGES[lang]['cities_button'] for lang in LANGUAGES.keys()))
def show_saved_cities(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']
        
        saved_cities = settings.get('saved_cities', [])
        if not saved_cities:
            safe_send_message(msg.chat.id, LANGUAGES[lang]['no_saved_cities'])
            return
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for city in saved_cities:
            markup.add(
                types.InlineKeyboardButton(f"üå§Ô∏è {city}", callback_data=f"weather_{city}"),
                types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"remove_city_{city}")
            )
        markup.add(types.InlineKeyboardButton(LANGUAGES[lang]['add_city'], callback_data="add_city"))
        
        safe_send_message(
            msg.chat.id,
            LANGUAGES[lang]['saved_cities'],
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_saved_cities: {e}")

# --- –í–º–µ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ show_chart_options ---
@bot.message_handler(func=lambda m: m.text and any(m.text == LANGUAGES[lang]['chart_button'] for lang in LANGUAGES.keys()))
def show_chart_options(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])
        if not saved_cities:
            default_cities = [
                LANGUAGES[lang]['city_tokyo'],
                LANGUAGES[lang]['city_london'],
                LANGUAGES[lang]['city_washington'],
                LANGUAGES[lang]['city_newyork']
            ]
            cities = default_cities
        else:
            cities = saved_cities
        markup = types.InlineKeyboardMarkup(row_width=2)
        for city in cities:
            markup.add(types.InlineKeyboardButton(f"üìä {city}", callback_data=f"chartcity_{city}"))
        markup.add(types.InlineKeyboardButton(LANGUAGES[lang]['add_city'], callback_data="add_city"))
        safe_send_message(
            msg.chat.id,
            LANGUAGES[lang]['select_city_chart'],
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"Error in show_chart_options: {e}")

# --- –ü–æ—Å–ª–µ show_chart_options ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("chartcity_"))
def handle_chart_city(call):
    try:
        city = call.data.split("_", 1)[1]
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        today = datetime.now()
        markup = types.InlineKeyboardMarkup(row_width=2)
        weekdays = LANGUAGES[lang]['weekdays']
        for i in range(5):
            date = today + timedelta(days=i)
            date_str = date.strftime('%Y-%m-%d')
            weekday_idx = date.weekday() % 7
            label = f"{date.strftime('%d.%m')} ({weekdays[weekday_idx]})"
            markup.add(types.InlineKeyboardButton(text=label, callback_data=f"chartdate_{city}_{date_str}"))
        safe_send_message(call.message.chat.id, LANGUAGES[lang]['select_date_chart'], reply_markup=markup)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_chart_city: {e}")        


@bot.message_handler(func=lambda m: m.text and any(m.text == LANGUAGES[lang]['forecast_button'] for lang in LANGUAGES.keys()))
def show_forecast_options(msg):
    if not check_rate_limit(msg.chat.id):
        safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    settings = data_manager.get_user_settings(msg.chat.id)
    lang = settings['language']
    saved_cities = settings.get('saved_cities', [])
    if not saved_cities:
        safe_send_message(msg.chat.id, LANGUAGES[lang]['no_saved_cities'])
        return
    # –ù–æ–≤—ã–π UX: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –ø–æ—Ç–æ–º –¥–∞—Ç—ã
    markup = types.InlineKeyboardMarkup(row_width=2)
    for city in saved_cities:
        markup.add(types.InlineKeyboardButton(f"üå¶Ô∏è {city}", callback_data=f"forecastcity_{city}"))
    markup.add(types.InlineKeyboardButton(LANGUAGES[lang]['add_city'], callback_data="add_city"))
    safe_send_message(
        msg.chat.id,
        LANGUAGES[lang]['select_city_forecast'],
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("forecastdate_"))
def handle_forecast_date(call):
    _, city, date_str = call.data.split("_", 2)
    settings = data_manager.get_user_settings(call.message.chat.id)
    lang = settings['language']
    city = weather_api.normalize_city_name(city)
    send_forecast_for_date(call.message.chat.id, city, lang, date_str)
    bot.answer_callback_query(call.id)

# --- –ü–æ—Å–ª–µ handle_chart_city ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("chartdate_"))
def handle_chart_date(call):
    try:
        _, city, date_str = call.data.split("_", 2)
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        forecast_data = get_cached_weather(city, lang, weather_api.get_forecast)
        if not forecast_data:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['not_found'])
            return
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        filtered = {'list': [item for item in forecast_data['list'] if datetime.fromtimestamp(item['dt']).strftime('%Y-%m-%d') == date_str]}
        if not forecast_data or 'list' not in forecast_data or not forecast_data['list']:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['not_found'])
            return
        if not filtered['list']:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['not_found'])
            return
        chart_buffer = ChartGenerator.create_temperature_chart(filtered, city, lang)
        if chart_buffer:
            bot.send_photo(
                call.message.chat.id,
                chart_buffer,
                caption=f"üìä {LANGUAGES[lang]['weather_chart']} - {city} ({date_str})"
            )
        else:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['error'].format(error="Chart generation failed"))
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in handle_chart_date: {e}")


# --- –ü–æ—Å–ª–µ handle_forecast_date ---
def send_forecast_for_date(chat_id: int, city: str, lang: str, selected_date: str):
    try:
        forecast_data = get_cached_weather(city, lang, weather_api.get_forecast)
        if not forecast_data or 'list' not in forecast_data or not forecast_data['list']:
            safe_send_message(chat_id, LANGUAGES.get(lang, LANGUAGES['ru'])['not_found'])
            return
        if not forecast_data or 'list' not in forecast_data or not forecast_data['list']:
            safe_send_message(chat_id, LANGUAGES.get(lang, LANGUAGES['ru'])['not_found'])
            return
        if not forecast_data:
            safe_send_message(chat_id, LANGUAGES[lang]['not_found'])
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        try:
            date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
        except Exception:
            date_obj = None
        today = datetime.now().date()
        tomorrow = today + timedelta(days=1)
        if date_obj:
            date_str = date_obj.strftime('%d.%m.%Y')
            if date_obj.date() == today:
                day_text = '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
            elif date_obj.date() == tomorrow:
                day_text = '–Ω–∞ –∑–∞–≤—Ç—Ä–∞'
            else:
                weekday = LANGUAGES[lang]['weekdays'][date_obj.weekday()] if 'weekdays' in LANGUAGES[lang] else date_obj.strftime('%A')
                day_text = f"–Ω–∞ {weekday} ({date_str})"
        else:
            day_text = f"–Ω–∞ {selected_date}"
        header = f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã {day_text} –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
        message = ""
        for item in forecast_data['list']:
            dt = datetime.fromtimestamp(item['dt'])
            if dt.strftime('%Y-%m-%d') != selected_date:
                continue
            hour = dt.strftime('%H')
            temp = round(item['main']['temp'])
            desc = item['weather'][0]['description'].title()
            icon = get_weather_icon(item['weather'][0]['description'])
            message += LANGUAGES[lang]['hourly'].format(
                hour=hour,
                icon=icon,
                desc=desc,
                temp=temp
            ) + "\n"
        if not message.strip():
            message = LANGUAGES[lang]['not_found']
        else:
            message = header + message
        logger.info(f"[NOTIFY] chat_id={chat_id} city={city} lang={lang} date={selected_date} message_len={len(message)} message_preview={message[:100]}")
        safe_send_message(chat_id, message)
    except Exception as e:
        logger.error(f"Error in send_forecast_for_date: {e} | chat_id={chat_id} city={city} lang={lang} date={selected_date}")
        safe_send_message(chat_id, LANGUAGES[lang]['error'].format(error=str(e)))


@bot.callback_query_handler(func=lambda call: call.data.startswith('weather_'))
def show_city_weather(call):
    try:
        city = call.data.split('_', 1)[1]
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        
        send_current_weather(call.message.chat.id, city, lang)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in show_city_weather: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('forecast_'))
def show_city_forecast(call):
    try:
        city = call.data.split('_', 1)[1]
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        # –ë–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        today_str = datetime.now().strftime('%Y-%m-%d')
        send_forecast_for_date(call.message.chat.id, city, lang, today_str)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in show_city_forecast: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('chart_'))
def send_weather_chart(call):
    try:
        city = call.data.split('_', 1)[1]
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        
        forecast_data = get_cached_weather(city, lang, weather_api.get_forecast)
        if not forecast_data:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['not_found'])
            return
        
        chart_buffer = ChartGenerator.create_temperature_chart(forecast_data, city, lang)
        if chart_buffer:
            bot.send_photo(
                call.message.chat.id,
                chart_buffer,
                caption=f"üìä {LANGUAGES[lang]['weather_chart']} - {city}"
            )
        else:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['error'].format(error="Chart generation failed"))
        
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in send_weather_chart: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "add_city")
def request_new_city(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']

        if len(settings.get('saved_cities', [])) >= 5:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['max_cities'])
            return

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(
            types.KeyboardButton(LANGUAGES[lang]['request_location'], request_location=True)
        )

        msg = bot.send_message(
            call.message.chat.id,
            f"{LANGUAGES[lang]['enter_city']}\n\n"
            f"{LANGUAGES[lang]['or_text']} {LANGUAGES[lang]['enter_city_manual']}",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_new_city)

    except Exception as e:
        logger.error(f"Error in request_new_city: {e}")

def process_new_city(msg, city=None):
    try:
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])

        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
        if city:
            city_name = weather_api.normalize_city_name(city)
        else:
            if not msg.text or len(msg.text.strip()) > 100:
                safe_send_message(msg.chat.id, LANGUAGES[lang]['not_found'])
                send_main_menu(msg.chat.id, lang)  # <--- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                return

            city_name = msg.text.strip()
            weather_data = get_cached_weather(city_name, lang, weather_api.get_current_weather)
            if not weather_data:
                safe_send_message(msg.chat.id, LANGUAGES[lang]['not_found'])
                send_main_menu(msg.chat.id, lang)
                return
            city_name = weather_api.normalize_city_name(weather_data['name'])

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥–æ—Ä–æ–¥–æ–≤ ---
        if len(saved_cities) >= 5:
            safe_send_message(
                msg.chat.id,
                LANGUAGES[lang]['max_cities']
            )
            send_main_menu(msg.chat.id, lang)
            return

        # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ ---
        if city_name not in saved_cities:
            saved_cities.append(city_name)
            data_manager.update_user_setting(msg.chat.id, 'saved_cities', saved_cities)
            if len(saved_cities) == 1:
                data_manager.update_user_setting(msg.chat.id, 'notification_city', city_name)

            safe_send_message(
                msg.chat.id,
                LANGUAGES[lang]['city_added'].format(city=city_name),
                reply_markup=types.ReplyKeyboardRemove()
            )
            send_current_weather(msg.chat.id, city_name, lang)
            send_main_menu(msg.chat.id, lang)
        else:
            safe_send_message(
                msg.chat.id,
                f"‚ö†Ô∏è {city_name} —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                reply_markup=types.ReplyKeyboardRemove()
            )
            send_current_weather(msg.chat.id, city_name, lang)
            send_main_menu(msg.chat.id, lang)

    except Exception as e:
        logger.error(f"Error in process_new_city: {e}")
        safe_send_message(
            msg.chat.id,
            LANGUAGES[lang]['error'].format(error="–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞")
        )
        send_main_menu(msg.chat.id, lang)


@bot.message_handler(func=lambda m: m.text in [LANGUAGES[lang]['settings_button'] for lang in LANGUAGES])
def show_settings(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])

        markup = types.InlineKeyboardMarkup(row_width=2)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        buttons = [
            types.InlineKeyboardButton(LANGUAGES[lang]['notifications_tab'], callback_data="notifications_settings"),
            types.InlineKeyboardButton(LANGUAGES[lang]['language_tab'], callback_data="language_settings"),
            types.InlineKeyboardButton(LANGUAGES[lang]['timezone_button'], callback_data="timezone_settings")
        ]
        
        # –ö–Ω–æ–ø–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        if saved_cities:
            buttons.append(
                types.InlineKeyboardButton(
                    LANGUAGES[lang]['saved_cities_title'],
                    callback_data="show_saved_cities_settings"
                )
            )

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(buttons), 2):
            markup.add(*buttons[i:i+2])

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        markup.add(types.InlineKeyboardButton(LANGUAGES[lang]['back_button'], callback_data="back_to_menu"))

        bot.send_message(
            msg.chat.id,
            LANGUAGES[lang]['settings_menu'].format(
                notifications="–≤–∫–ª" if settings.get('notifications') else "–≤—ã–∫–ª",
                time=settings.get('notification_time', '--:--'),
                lang=lang.upper(),
                cities=len(saved_cities),
                timezone=settings.get('timezone', 'UTC')
            ),
            parse_mode="Markdown",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"Error in show_settings: {e}")
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@bot.callback_query_handler(func=lambda call: call.data == "show_saved_cities_settings")
def show_saved_cities_settings(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])

        markup = types.InlineKeyboardMarkup()

        if not saved_cities:
            markup.add(types.InlineKeyboardButton(
                LANGUAGES[lang]['back_button'],
                callback_data="back_to_settings"
            ))
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=LANGUAGES[lang]['no_cities_text'],
                reply_markup=markup
            )
            return

        for city in saved_cities:
            markup.row(
                types.InlineKeyboardButton(
                    f"{city}",
                    callback_data=f"weather_{city}"
                ),
                types.InlineKeyboardButton(
                    LANGUAGES[lang]['remove_city_btn'],
                    callback_data=f"remove_city_{city}"
                ),
                types.InlineKeyboardButton(
                    LANGUAGES[lang]['forecast_city_btn'],
                    callback_data=f"forecast_{city}"
                )
            )

        markup.add(types.InlineKeyboardButton(
            LANGUAGES[lang]['back_button'],
            callback_data="back_to_settings"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=LANGUAGES[lang]['saved_cities_title'] + f"\n\n{LANGUAGES[lang]['saved_cities_count'].format(len(saved_cities))}",
            parse_mode="Markdown",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"Error in show_saved_cities_settings: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤")

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_city_"))
def remove_city_handler(call):
    try:
        city = call.data[len("remove_city_"):]  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤ —Å "_"
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        saved_cities = settings.get('saved_cities', [])

        if city in saved_cities:
            saved_cities.remove(city)
            data_manager.update_user_setting(call.message.chat.id, 'saved_cities', saved_cities)
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['city_removed'].format(city=city))
            # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            show_saved_cities_settings(call)
        else:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['not_found'])

        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in remove_city_handler: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

@bot.callback_query_handler(func=lambda call: call.data == "language_settings")
def show_languages(call):
    user_lang = data_manager.get_user_settings(call.message.chat.id)['language']
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru"),
        types.InlineKeyboardButton("English", callback_data="set_lang_en")
    )
    markup.row(
        types.InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_lang_uk"),
        types.InlineKeyboardButton(LANGUAGES[user_lang]['back_button'], callback_data="back_to_settings")
    )
    
    bot.edit_message_text(
        LANGUAGES[user_lang]['language_title'],
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("set_lang_"))
def set_language(call):
    lang = call.data.split("_")[2]
    data_manager.update_user_setting(call.message.chat.id, 'language', lang)
    
    bot.answer_callback_query(call.id, LANGUAGES[lang]['language_changed'])
    show_settings(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "timezone_settings")
def handle_timezone_settings(call):
    lang = data_manager.get_user_settings(call.message.chat.id).get('language', 'ru')
    markup = generate_utc_timezone_keyboard(lang)
    bot.edit_message_text(
        LANGUAGES[lang]['choose_timezone'],
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_timezone_UTC"))
def set_utc_timezone(call):
    try:
        offset_str = call.data.replace("set_timezone_UTC", "")
        try:
            offset = float(offset_str)
        except ValueError:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ UTC")
            return
        data_manager.update_user_setting(call.message.chat.id, 'timezone', f"UTC{offset:+g}")
        lang = data_manager.get_user_settings(call.message.chat.id).get('language', 'ru')
        safe_send_message(call.message.chat.id, LANGUAGES[lang]['timezone_set'].format(timezone=f"UTC{offset:+g}"))
        show_settings(call.message)
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in set_utc_timezone: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞")    


@bot.message_handler(func=lambda m: True)
def handle_text_message(msg):
    if not check_rate_limit(msg.chat.id):
        safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    text = msg.text.strip()
    if not text or any(char in text for char in [';', '"', "'", '\\']):
        safe_send_message(msg.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return
    if len(text) > 100:  
        safe_send_message(msg.chat.id, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    try:
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']
        text = msg.text.strip()

        all_button_texts = []
        for l in LANGUAGES.keys():
            all_button_texts.extend([
                LANGUAGES[l]['forecast_button'],
                LANGUAGES[l]['cities_button'], 
                LANGUAGES[l]['settings_button'],
                LANGUAGES[l]['chart_button'],
                LANGUAGES[l]['send_location']
            ])

        if text in all_button_texts or text.startswith('/'):
            return

        if len(text) < 2 or len(text) > 100:
            safe_send_message(msg.chat.id, LANGUAGES[lang]['enter_city_or_location'])
            return

        weather_data = get_cached_weather(text, lang, weather_api.get_current_weather)
        if not weather_data or 'name' not in weather_data:
            safe_send_message(msg.chat.id, LANGUAGES[lang]['not_found'])
            return

        city_name = weather_api.normalize_city_name(weather_data['name'])
        saved_cities = settings.get('saved_cities', [])

        if city_name not in saved_cities:
            if len(saved_cities) < 5:
                saved_cities.append(city_name)
                data_manager.update_user_setting(msg.chat.id, 'saved_cities', saved_cities)
                safe_send_message(msg.chat.id, LANGUAGES[lang]['city_added'].format(city=city_name))
            else:
                safe_send_message(msg.chat.id, LANGUAGES[lang]['max_cities'])
        send_current_weather(msg.chat.id, city_name, lang)
        send_main_menu(msg.chat.id, lang)
        
            
    except Exception as e:
        logger.error(f"Error in handle_text_message: {e}")

def send_current_weather(chat_id, city, lang, lat=None, lon=None):
    try:
        current_data = get_cached_weather(city, lang, weather_api.get_current_weather)
        if not current_data:
            safe_send_message(chat_id, LANGUAGES[lang]['not_found'])
            return

        temp = round(current_data['main']['temp'])
        feels_like = round(current_data['main']['feels_like'])
        description = current_data['weather'][0]['description'].title()
        icon = get_weather_icon(current_data['weather'][0]['description'])

        wind_speed = current_data['wind']['speed']
        wind_gust = current_data['wind'].get('gust', wind_speed)
        wind_dir = get_wind_direction(current_data['wind'].get('deg'), lang)

        sunrise = datetime.fromtimestamp(current_data['sys']['sunrise']).strftime('%H:%M')
        sunset = datetime.fromtimestamp(current_data['sys']['sunset']).strftime('%H:%M')

        uv_info = ""
        if lat and lon:
            uv, risk = get_uv_index(lat, lon)
            if uv is not None:
                uv_info = "\n" + LANGUAGES[lang]['uv_index'].format(uv=uv, risk=risk)
        
        message = (
            f"{icon} {LANGUAGES[lang]['in_city'].format(city=city)}\n"
            f"üå°Ô∏è {temp}¬∞C {LANGUAGES[lang]['feels_like'].format(feels=feels_like)}\n"
            f"{description}\n\n"
            f"{LANGUAGES[lang]['wind_info'].format(speed=wind_speed, direction=wind_dir, gust=wind_gust)}\n"
            f"{LANGUAGES[lang]['humidity'].format(humidity=current_data['main']['humidity'])}\n"
            f"{LANGUAGES[lang]['pressure'].format(pressure=current_data['main']['pressure'])}\n"
            f"{LANGUAGES[lang]['sun_info'].format(sunrise=sunrise, sunset=sunset)}"
            f"{uv_info}"
        )
        
        safe_send_message(chat_id, message, parse_mode="Markdown")
        
        forecast_data = get_cached_weather(city, lang, weather_api.get_forecast)
        if forecast_data:
            chart_buffer = ChartGenerator.create_temperature_precipitation_chart(forecast_data, city, lang)
            if chart_buffer:
                bot.send_photo(chat_id, chart_buffer, caption=LANGUAGES[lang]['precipitation_chart'])
        
    except Exception as e:
        logger.error(f"Error in send_current_weather: {e}")

def get_uv_index(lat, lon, lang='en'):
    """–ü–æ–ª—É—á–∞–µ—Ç UV-–∏–Ω–¥–µ–∫—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    try:
        response = requests.get(
            f"https://api.openweathermap.org/data/2.5/uvi?lat={lat}&lon={lon}&appid={OWM_API_KEY}"
        )
        uv = response.json().get('value', 0)
        
        if uv <= 2:
            risk = LANGUAGES[lang]['uv_risk']['low']
        elif uv <= 5:
            risk = LANGUAGES[lang]['uv_risk']['moderate']
        elif uv <= 7:
            risk = LANGUAGES[lang]['uv_risk']['high']
        elif uv <= 10:
            risk = LANGUAGES[lang]['uv_risk']['very_high']
        else:
            risk = LANGUAGES[lang]['uv_risk']['extreme']
            
        return uv, risk
    except:
        return None, None

def get_wind_direction(degrees, lang='en'):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ"""
    if lang == 'ru':
        directions = ['‚Üì –°', '‚Üô –°–í', '‚Üê –í', '‚Üñ –Æ–í', '‚Üë –Æ', '‚Üó –Æ–ó', '‚Üí –ó', '‚Üò –°–ó']
    elif lang == 'uk':
        directions = ['‚Üì –ü–Ω', '‚Üô –ü–Ω–°—Ö', '‚Üê –°—Ö', '‚Üñ –ü–¥–°—Ö', '‚Üë –ü–¥', '‚Üó –ü–¥–ó—Ö', '‚Üí –ó—Ö', '‚Üò –ü–Ω–ó—Ö']
    else:  # en
        directions = ['‚Üì N', '‚Üô NE', '‚Üê E', '‚Üñ SE', '‚Üë S', '‚Üó SW', '‚Üí W', '‚Üò NW']
    
    return directions[round(degrees / 45) % 8] if degrees is not None else ""

def send_forecast(chat_id: int, city: str, lang: str):
    try:
        forecast_data = get_cached_weather(city, lang, weather_api.get_forecast)
        if not forecast_data:
            safe_send_message(chat_id, LANGUAGES[lang]['not_found'])
            return

        current_data = get_cached_weather(city, lang, weather_api.get_current_weather)
        if current_data:
            send_current_weather(chat_id, city, lang)

        message = "\n\n" + LANGUAGES[lang]['hourly_forecast'] + "\n"

        for i, item in enumerate(forecast_data['list'][:8]):  # 8 –∑–∞–ø–∏—Å–µ–π = ~24 —á–∞—Å–∞
            dt = datetime.fromtimestamp(item['dt'])
            hour = dt.strftime('%H')
            temp = round(item['main']['temp'])
            desc = item['weather'][0]['description'].title()
            icon = get_weather_icon(item['weather'][0]['description'])

            message += LANGUAGES[lang]['hourly'].format(
                hour=hour,
                icon=icon,
                desc=desc,
                temp=temp
            ) + "\n"

        safe_send_message(chat_id, message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in send_forecast: {e}")
        safe_send_message(chat_id, LANGUAGES[lang]['error'].format(error=str(e)))

def send_notifications():
    """Send daily weather notifications to users at their preferred time"""
    try:
        logger.info("[NOTIFICATIONS] Starting notification cycle")

        utc_now = datetime.now(timezone.utc).replace(second=0, microsecond=0)
        logger.debug(f"[NOTIFICATIONS] Current UTC time: {utc_now}")

        users = data_manager.collection.find({
            'notifications': True,
            'saved_cities': {'$exists': True, '$ne': []}
        })
        
        notification_count = 0
        error_count = 0
        
        for user in users:
            try:
                chat_id = user["chat_id"]
                settings = data_manager.get_user_settings(chat_id)  # Get fresh settings
                lang = settings.get('language', 'en')

                if not settings.get('notifications', False) or not settings.get('saved_cities'):
                    continue

                timezone_str = settings.get('timezone', 'UTC')
                try:
                    offset = parse_utc_timezone(timezone_str)
                    if offset is not None:
                        user_tz = pytz.FixedOffset(int(offset*60))
                    else:
                        user_tz = pytz.UTC
                    user_now = utc_now.astimezone(user_tz)

                except pytz.UnknownTimeZoneError:
                    logger.warning(f"[NOTIFICATIONS] Unknown timezone {timezone_str} for user {chat_id}, using UTC")
                    user_tz = pytz.UTC

                user_now = utc_now.astimezone(user_tz)
                today_str = user_now.strftime('%Y-%m-%d')
                
                notification_time = settings.get('notification_time', '20:00')
                try:
                    notif_hour, notif_minute = map(int, notification_time.split(':'))
                except ValueError:
                    logger.warning(f"[NOTIFICATIONS] Invalid time format {notification_time} for user {chat_id}, using 20:00")
                    notif_hour, notif_minute = 20, 0
                
                if (user_now.hour, user_now.minute) != (notif_hour, notif_minute):
                    continue
                
                last_sent = settings.get('last_notification_date')
                if last_sent == today_str:
                    logger.debug(f"[NOTIFICATIONS] Already sent to {chat_id} today")
                    continue
                
                notification_city = settings.get('notification_city')
                saved_cities = settings.get('saved_cities', [])
                city = notification_city if notification_city in saved_cities else saved_cities[0]

                tomorrow_date = (user_now + timedelta(days=1)).strftime('%Y-%m-%d')
                
                logger.info(f"[NOTIFICATIONS] Sending to {chat_id} for {city} ({tomorrow_date})")
                
                send_forecast_for_date(chat_id, city, lang, tomorrow_date)
                
                data_manager.update_user_setting(chat_id, 'last_notification_date', today_str)
                notification_count += 1
                
            except Exception as user_error:
                error_count += 1
                logger.error(f"[NOTIFICATIONS] Error for user {user.get('chat_id')}: {str(user_error)}", exc_info=True)
                continue
        
        logger.info(f"[NOTIFICATIONS] Completed. Sent: {notification_count}, Errors: {error_count}")
        
    except Exception as e:
        logger.critical(f"[NOTIFICATIONS] System error: {str(e)}", exc_info=True)

def notification_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üì° Notification scheduler started.")
    schedule.every().minute.do(send_notifications)
    
    while True:
        try:
            schedule.run_pending()
            time.sleep(30) 
        except Exception as e:
            logger.error(f"Error in notification scheduler: {e}")
            time.sleep(60)

@bot.callback_query_handler(func=lambda call: call.data == "toggle_notifications")
def toggle_notifications(call):
    try:
        bot.answer_callback_query(call.id)
        settings = data_manager.get_user_settings(call.message.chat.id)
        settings['notifications'] = not settings['notifications']
        data_manager.update_user_setting(call.message.chat.id, 'notifications', settings['notifications'])
        lang = settings['language']
        status = LANGUAGES[lang]['on'] if settings['notifications'] else LANGUAGES[lang]['off']
        safe_send_message(call.message.chat.id, LANGUAGES[lang]['notifications_status'].format(status=status))
        show_settings(call.message)  # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
    except Exception as e:
        logger.error(f"Error in toggle_notifications: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "set_notification_time")
def request_notification_time(call):
    try:
        bot.answer_callback_query(call.id)
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']

        msg = bot.send_message(
            call.message.chat.id,
            LANGUAGES[lang]['enter_notification_time_full']
        )
        bot.register_next_step_handler(msg, process_notification_time)

    except Exception as e:
        logger.error(f"Error in request_notification_time: {e}")

def process_notification_time(msg):
    try:
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']

        time_text = msg.text.strip()

        try:
            datetime.strptime(time_text, '%H:%M')
            data_manager.update_user_setting(msg.chat.id, 'notification_time', time_text)
            safe_send_message(
                msg.chat.id,
                LANGUAGES[lang]['notifications_scheduled'].format(time=time_text)
            )
            show_settings(msg)
        except ValueError:
            safe_send_message(msg.chat.id, LANGUAGES[lang]['invalid_time_format_full'])

    except Exception as e:
        logger.error(f"Error in process_notification_time: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "change_language")
def change_language_menu(call):
    try:
        bot.answer_callback_query(call.id)
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        markup = types.InlineKeyboardMarkup(row_width=3)
        buttons = []
        for code in LANGUAGES.keys():
            buttons.append(types.InlineKeyboardButton(
                code.upper(), callback_data=f"setlang_{code}"
            ))
        markup.add(*buttons)

        safe_send_message(
            call.message.chat.id,
            LANGUAGES[lang]['choose_language'],
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"Error in change_language_menu: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('setlang_'))
def change_language(call):
    try:
        new_lang = call.data.split('_')[1]
        data_manager.update_user_setting(call.message.chat.id, 'language', new_lang)
        safe_send_message(
            call.message.chat.id,
            LANGUAGES[new_lang]['language_changed'].format(lang=new_lang.upper()),
            reply_markup=create_main_keyboard(new_lang)
        )
        show_settings(call.message)  # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Error in change_language: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "clear_cities")
def clear_all_cities(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(LANGUAGES[lang]['confirm_clear_all_yes'], callback_data="confirm_clear"),
            types.InlineKeyboardButton(LANGUAGES[lang]['cancel'], callback_data="cancel_clear")
        )

        safe_send_message(
            call.message.chat.id,
            LANGUAGES[lang]['confirm_clear_all'],
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"Error in clear_all_cities: {e}")

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_clear", "cancel_clear"])
def handle_clear_confirmation(call):
    try:
        settings = data_manager.get_user_settings(call.message.chat.id)
        lang = settings['language']
        if call.data == "confirm_clear":
            data_manager.update_user_setting(call.message.chat.id, 'saved_cities', [])
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['all_cities_removed'])
        else:
            safe_send_message(call.message.chat.id, LANGUAGES[lang]['cancelled'])

        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"Error in handle_clear_confirmation: {e}")

@bot.message_handler(commands=['help'])
def cmd_help(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']

        help_text = LANGUAGES[lang].get('help_full', LANGUAGES[lang]['help'])
        safe_send_message(msg.chat.id, help_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in cmd_help: {e}")

@bot.message_handler(func=lambda message: True, content_types=['audio', 'photo', 'voice', 'video', 'document',
                                                              'sticker', 'video_note', 'contact', 'venue'])
def handle_unsupported_content(msg):
    try:
        if not check_rate_limit(msg.chat.id):
            safe_send_message(msg.chat.id, "–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        settings = data_manager.get_user_settings(msg.chat.id)
        lang = settings['language']

        safe_send_message(
            msg.chat.id,
            LANGUAGES[lang]['only_text_location']
        )

    except Exception as e:
        logger.error(f"Error in handle_unsupported_content: {e}")

from flask import Flask, request
import os

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-app.onrender.com
WEBHOOK_PATH = ""  # –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ, —á—Ç–æ–±—ã –±—ã–ª '/'
WEBHOOK_URL = f"{WEBHOOK_HOST}/"

app = Flask(__name__)


@app.route("/", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
        bot.process_new_updates([update])
    return "ok", 200

@app.route("/", methods=["GET"])
def healthcheck():
    return "ok", 200

def test_connections():
    try:
        data_manager.client.admin.command('ping')
        print("‚úÖ MongoDB connection successful")
    except Exception as e:
        print(f"‚ùå MongoDB failed: {e}")

    test_weather = weather_api.get_current_weather("London", "en")
    print(f"üå§Ô∏è Weather test: {'‚úÖ' if test_weather else '‚ùå'}")

if __name__ == '__main__':
    logger.info("üöÄ Starting WeatherBot 2.0...")

    def init_background_tasks():
        try:
            try:
                test_forecast = weather_api.get_forecast("London", "en")
                if not test_forecast:
                    logger.error("‚ùå OpenWeather API returned empty forecast. Check your API key or quota.")
            except Exception as test_e:
                logger.error(f"‚ùå OpenWeather API check failed: {test_e}")

            set_hook = bot.set_webhook(url=WEBHOOK_URL)
            if set_hook:
                logger.info(f"‚úÖ Webhook set to {WEBHOOK_URL}")
            else:
                logger.error(f"‚ùå Failed to set webhook to {WEBHOOK_URL}")

            scheduler_thread = threading.Thread(target=notification_scheduler, daemon=True)
            scheduler_thread.start()
        except Exception as e:
            logger.error(f"üí• Background init error: {e}")

    threading.Thread(target=self_ping, daemon=True).start()

    threading.Thread(target=init_background_tasks, daemon=True).start()

    try:
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
    except Exception as e:
        logger.error(f"üí• Critical error: {e}")
    finally:
        logger.info("üõë WeatherBot 2.0 shutdown complete")
